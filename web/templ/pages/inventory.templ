package pages

import "dqix/internal/types"
import "dqix/web/templ/components/base"
import "dqix/web/templ/components/links"
import "strings"
import "dqix/web/templ/utilities"
import "strconv"
import "fmt"

// Inventory Classifications
type InventoryClassificationParams struct {
	Classification string
	Inventories    types.InventorySlice
	Stats          types.HasInventoryStats
	DisplayMode    string
	IsDarkMode     bool
}

templ InventoryClassificationPage(params InventoryClassificationParams) {
	@base.Layout("DQIX | " + strings.Title(params.Classification), params.Classification, params.IsDarkMode) {
		@InventoryClassificationContent(params)
	}
}

templ InventoryClassificationContentWithSideNav(params InventoryClassificationParams) {
	@base.MainContentWithSidenav(params.Classification) {
		@InventoryClassificationContent(params)
	}
}

templ InventoryClassificationContent(params InventoryClassificationParams) {
	<div>
		<h1 class="text-3xl font-bold">{ strings.Title(strings.ReplaceAll(params.Classification, "-", " ")) }</h1>
		if params.DisplayMode == "list" {
			@InventoryClassificationList(params.Inventories)
		} else {
			@InventoryClassificationTable(params)
		}
	</div>
}

templ InventoryClassificationTable(params InventoryClassificationParams) {
	<table role="table">
		<thead role="rowgroup">
			<tr role="row" class="[&>th]:text-left [&>th]:py-2 [&>th]:pr-4">
				<th role="columnheader" id="image"></th>
				<th role="columnheader" id="name">Name</th>
				if params.Stats.HasAttack {
					<th role="columnheader" id="attack">Attack</th>
				}
				if params.Stats.HasDefense {
					<th role="columnheader" id="defense">Defense</th>
				}
				if params.Stats.HasBlockChance {
					<th role="columnheader" id="block-chance">Block</th>
				}
				if params.Stats.HasAgility {
					<th role="columnheader" id="agility">Agility</th>
				}
				if params.Stats.HasEvasionChance {
					<th role="columnheader" id="evasion-chance">Evasion</th>
				}
				if params.Stats.HasMagicalMight {
					<th role="columnheader" id="magical-might">Magical Might</th>
				}
				if params.Stats.HasMagicalMending {
					<th role="columnheader" id="Magical Mending">Magical Mending</th>
				}
				if params.Stats.HasMPAbsorptionRate {
					<th role="columnheader" id="mp-absorption-rate">MP Absorption</th>
				}
				if params.Stats.HasDeftness {
					<th role="columnheader" id="deftness">Deftness</th>
				}
				if params.Stats.HasCharm {
					<th role="columnheader" id="charm">Charm</th>
				}
				if params.Stats.HasSpecial {
					<th role="columnheader" id="special">Special</th>
				}
			</tr>
		</thead>
		<tbody role="rowgroup" class="[&>tr:nth-child(odd)]:bg-gray-200" hx-boost="true" hx-target="#page-content" hx-swap="innerHTML">
			for _, inventory := range params.Inventories {
				<tr key={ inventory.ID } role="row" class="[&>td]:py-2 [&>td]:pr-4">
					<td role="cell" data-cell="image" width="49px">
						<img src={ inventory.ImageSrc() } alt={ inventory.ID }/>
					</td>
					<td role="cell" data-cell="name">
						@links.Link(inventory.Title, fn.Path(inventory.GetPath()), nil)
					</td>
					if params.Stats.HasAttack {
						<td role="cell" data-cell="attack" class="text-center">
							if inventory.Statistics.Attack > 0 {
								{ strconv.Itoa(inventory.Statistics.Attack) }
							}
						</td>
					}
					if params.Stats.HasDefense {
						<td role="cell" data-cell="defense" class="text-center">
							if inventory.Statistics.Defense > 0 {
								{ strconv.Itoa(inventory.Statistics.Defense) }
							}
						</td>
					}
					if params.Stats.HasBlockChance {
						<td role="cell" data-cell="block-chance" class="text-center">
							if inventory.Statistics.BlockChance > 0 {
								{ fmt.Sprintf("%.2f%%", inventory.Statistics.BlockChance) }
							}
						</td>
					}
					if params.Stats.HasAgility {
						<td role="cell" data-cell="agility" class="text-center">
							if inventory.Statistics.Agility > 0 {
								{ strconv.Itoa(inventory.Statistics.Agility) }
							}
						</td>
					}
					if params.Stats.HasEvasionChance {
						<td role="cell" data-cell="evasion-chance" class="text-center">
							if inventory.Statistics.EvasionChance > 0 {
								{ fmt.Sprintf("%.2f%%", inventory.Statistics.EvasionChance) }
							}
						</td>
					}
					if params.Stats.HasMagicalMight {
						<td role="cell" data-cell="magical-might" class="text-center">
							if inventory.Statistics.MagicalMight > 0 {
								{ strconv.Itoa(inventory.Statistics.MagicalMight) }
							}
						</td>
					}
					if params.Stats.HasMagicalMending {
						<td role="cell" data-cell="magical-mending" class="text-center">
							if inventory.Statistics.MagicalMending > 0 {
								{ strconv.Itoa(inventory.Statistics.MagicalMending) }
							}
						</td>
					}
					if params.Stats.HasMPAbsorptionRate {
						<td role="cell" data-cell="mp-absorption-rate" class="text-center">
							if inventory.Statistics.MPAbsorptionRate > 0 {
								{ fmt.Sprintf("%.2f%%",inventory.Statistics.MPAbsorptionRate) }
							}
						</td>
					}
					if params.Stats.HasDeftness {
						<td role="cell" data-cell="deftness" class="text-center">
							if inventory.Statistics.Deftness > 0 {
								{ strconv.Itoa(inventory.Statistics.Deftness) }
							}
						</td>
					}
					if params.Stats.HasCharm {
						<td role="cell" data-cell="charm" class="text-center">
							if inventory.Statistics.Charm > 0 {
								{ strconv.Itoa(inventory.Statistics.Charm) }
							}
						</td>
					}
					if params.Stats.HasSpecial {
						<td role="cell" data-cell="special">
							if inventory.Statistics.Special.Effect != "" {
								<p><strong>Effect: </strong>{ inventory.Statistics.Special.Effect }</p>
							}
							if inventory.Statistics.Special.Usage != "" {
								<p><strong>Use: </strong>{ inventory.Statistics.Special.Usage }</p>
							}
							if inventory.Statistics.Special.Curse != "" {
								<p><strong>Curse: </strong>{ inventory.Statistics.Special.Curse }</p>
							}
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}

templ InventoryClassificationList(inventories types.InventorySlice) {
	<ul hx-boost="true" hx-target="#page-content" hx-swap="innerHTML" class="[&>li]:flex [&>li]:items-center">
		for _, inventory := range inventories {
			<li>
				<img src={ inventory.ImageSrc() } alt={ inventory.ID }/>
				@links.Link(inventory.Title, fn.Path(inventory.GetPath()), nil)
			</li>
		}
	</ul>
}

// Inventory
templ InventoryPage(inventory types.Inventory, getter types.IGetThingFromID, isDarkMode bool) {
	@base.Layout("DQIX | " + inventory.Title, inventory.Classification, isDarkMode) {
		@InventoryContent(inventory, getter)
	}
}

templ InventoryContentWithSideNav(inventory types.Inventory, getter types.IGetThingFromID) {
	@base.MainContentWithSidenav(inventory.Classification) {
		@InventoryContent(inventory, getter)
	}
}

templ InventoryContent(inventory types.Inventory, getter types.IGetThingFromID) {
	<div hx-boost="true" hx-target="#page-content">
		<div class="flex flex-row items-center">
			<img src={ inventory.ImageSrc() } alt={ inventory.ID }/>
			<h1 id="title" class="text-3xl font-bold">
				{ inventory.Title }
			</h1>
		</div>
		<hr/>
		<p id="description" class="pt-4 pb-2">{ inventory.Description }</p>
		if inventory.Statistics != (types.Statistics{}) {
			<p id="statistics" class="py-2">
				if inventory.Statistics.Attack > 0 {
					<strong>Attack: </strong>{ strconv.Itoa(inventory.Statistics.Attack) }
					<br/>
				}
				if inventory.Statistics.Defense > 0 {
					<strong>Defense: </strong>{ strconv.Itoa(inventory.Statistics.Defense) }
					<br/>
				}
				if inventory.Statistics.BlockChance > 0 {
					<strong>Block Chance: </strong>{ fmt.Sprintf("%.2f%%", inventory.Statistics.BlockChance) }
					<br/>
				}
				if inventory.Statistics.Agility > 0 {
					<strong>Agility: </strong>{ strconv.Itoa(inventory.Statistics.Agility) }
					<br/>
				}
				if inventory.Statistics.EvasionChance > 0 {
					<strong>Evasion Chance: </strong>{ fmt.Sprintf("%.2f%%", inventory.Statistics.EvasionChance) }
					<br/>
				}
				if inventory.Statistics.MagicalMight > 0 {
					<strong>Magical Might: </strong>{ strconv.Itoa(inventory.Statistics.MagicalMight) }
					<br/>
				}
				if inventory.Statistics.MagicalMending > 0 {
					<strong>Magical Mending: </strong>{ strconv.Itoa(inventory.Statistics.MagicalMending) }
					<br/>
				}
				if inventory.Statistics.MPAbsorptionRate > 0 {
					<strong>MP Absorption Rate: </strong>{ fmt.Sprintf("%.2f%%", inventory.Statistics.MPAbsorptionRate) }
					<br/>
				}
				if inventory.Statistics.Deftness > 0 {
					<strong>Deftness: </strong>{ strconv.Itoa(inventory.Statistics.Deftness) }
					<br/>
				}
				if inventory.Statistics.Charm > 0 {
					<strong>Charm: </strong>{ strconv.Itoa(inventory.Statistics.Charm) }
					<br/>
				}
				if inventory.Statistics.Special != (types.Special{}) {
					<strong>Special: </strong>
					<br/>
					if inventory.Statistics.Special.Effect != "" {
						<em class="pl-2">Effect: </em> { inventory.Statistics.Special.Effect }
						<br/>
					}
					if inventory.Statistics.Special.Usage != "" {
						<em class="pl-2">Usage: </em> { inventory.Statistics.Special.Usage }
						<br/>
					}
					if inventory.Statistics.Special.Curse != "" {
						<em class="pl-2">Curse: </em> { inventory.Statistics.Special.Curse }
						<br/>
					}
				}
			</p>
		}
		<p id="details" class="py-2">
			<strong>Rarity: </strong>{ fmt.Sprintf("%d/5", inventory.Rarity) }
			<br/>
			if inventory.BuyPrice > 0 {
				<strong>Buy price: </strong>{ fmt.Sprintf("%d gold", inventory.BuyPrice) }
				<br/>
			}
			if inventory.SellPrice > 0 {
				<strong>Sell price: </strong>{ fmt.Sprintf("%d gold", inventory.SellPrice) }
				<br/>
			}
			if len(inventory.Vocations) > 0 {
				<strong>Used by: </strong>{ strings.Join(inventory.Vocations, ", ") }
				<br/>
			}
			<strong>Classification: </strong>{ inventory.Classification }
		</p>
		if len(inventory.LocationsFound) > 0 {
			<div id="locations-found" class="py-2">
				<strong>Where to find:</strong>
				<ul class="pl-8 list-disc">
					for _, location := range inventory.LocationsFound {
						<li>
							{ location }
						</li>
					}
				</ul>
			</div>
		}
		if len(inventory.DroppedBy) > 0 {
			<div id="dropped-by" class="py-2">
				<strong>Dropped by:</strong>
				<ul class="pl-8 list-disc">
					for monster, dropRate := range inventory.DroppedBy {
						<li>
							@links.ThingLink(monster, getter)
							<span>
								&nbsp;{ dropRate }
							</span>
						</li>
					}
				</ul>
			</div>
		}
		if len(inventory.Recipe) > 0 {
			<div id="recipe" class="py-2">
				<strong>Recipe: </strong>
				for index, ingredient := range inventory.RecipeSlice() {
					if index > 0 {
						<span>&nbsp;+ </span>
					}
					@links.ThingLink(ingredient.ID, getter)
					<span>&times;{ strconv.Itoa(ingredient.Quantity) }</span>
				}
			</div>
		}
		if len(inventory.IngredientFor) > 0 {
			<div id="alchemises" class="py-2">
				<strong>Alchemises:</strong>
				<ul class="pl-8 list-disc">
					for _, id := range inventory.IngredientFor {
						<li>
							@links.ThingLink(id, getter)
						</li>
					}
				</ul>
			</div>
		}
		if len(inventory.RequiredFor) > 0 {
			<div id="required-for" class="py-2">
				<strong>Required for:</strong>
				<ul class="pl-8 list-disc">
					for _, id := range inventory.RequiredFor {
						<li>
							@links.ThingLink(id, getter)
						</li>
					}
				</ul>
			</div>
		}
		if len(inventory.CanBeUsedFor) > 0 {
			<div id="can-be-used-for" class="py-2">
				<strong>Can be used for:</strong>
				<ul class="pl-8 list-disc">
					for _, id := range inventory.CanBeUsedFor {
						<li>
							@links.ThingLink(id, getter)
						</li>
					}
				</ul>
			</div>
		}
	</div>
}
