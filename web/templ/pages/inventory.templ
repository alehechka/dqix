package pages

import "dqix/internal/types"
import "dqix/web/templ/components/base"
import "dqix/web/templ/components/links"
import "strings"
import "strconv"
import "fmt"

// Inventory

type InventoryParams struct {
	Inventory    types.Inventory
	Getter       types.IGetThingFromID
	LayoutParams base.LayoutParams
}

templ InventoryPage(params InventoryParams) {
	@base.Layout(params.LayoutParams) {
		@InventoryContent(params)
	}
}

templ InventoryContentWithSideNav(params InventoryParams) {
	@base.MainContentWithSidenav(params.Inventory.Classification) {
		@InventoryContent(params)
	}
}

templ InventoryContent(params InventoryParams) {
	<div hx-boost="true" hx-target="#page-content">
		<div class="flex flex-row items-center">
			<img src={ params.Inventory.ImageSrc() } alt={ params.Inventory.GetID() }/>
			<h1 id="title" class="text-3xl font-bold">
				{ params.Inventory.Title }
			</h1>
		</div>
		<hr/>
		<p id="description" class="pt-4 pb-2">{ params.Inventory.Description }</p>
		if params.Inventory.Statistics != (types.Statistics{}) {
			<p id="statistics" class="py-2">
				if params.Inventory.Statistics.Attack > 0 {
					<strong>Attack: </strong>{ strconv.Itoa(params.Inventory.Statistics.Attack) }
					<br/>
				}
				if params.Inventory.Statistics.Defense > 0 {
					<strong>Defense: </strong>{ strconv.Itoa(params.Inventory.Statistics.Defense) }
					<br/>
				}
				if params.Inventory.Statistics.BlockChance > 0 {
					<strong>Block Chance: </strong>{ fmt.Sprintf("%.2f%%", params.Inventory.Statistics.BlockChance) }
					<br/>
				}
				if params.Inventory.Statistics.Agility > 0 {
					<strong>Agility: </strong>{ strconv.Itoa(params.Inventory.Statistics.Agility) }
					<br/>
				}
				if params.Inventory.Statistics.EvasionChance > 0 {
					<strong>Evasion Chance: </strong>{ fmt.Sprintf("%.2f%%", params.Inventory.Statistics.EvasionChance) }
					<br/>
				}
				if params.Inventory.Statistics.MagicalMight > 0 {
					<strong>Magical Might: </strong>{ strconv.Itoa(params.Inventory.Statistics.MagicalMight) }
					<br/>
				}
				if params.Inventory.Statistics.MagicalMending > 0 {
					<strong>Magical Mending: </strong>{ strconv.Itoa(params.Inventory.Statistics.MagicalMending) }
					<br/>
				}
				if params.Inventory.Statistics.MPAbsorptionRate > 0 {
					<strong>MP Absorption Rate: </strong>{ fmt.Sprintf("%.2f%%", params.Inventory.Statistics.MPAbsorptionRate) }
					<br/>
				}
				if params.Inventory.Statistics.Deftness > 0 {
					<strong>Deftness: </strong>{ strconv.Itoa(params.Inventory.Statistics.Deftness) }
					<br/>
				}
				if params.Inventory.Statistics.Charm > 0 {
					<strong>Charm: </strong>{ strconv.Itoa(params.Inventory.Statistics.Charm) }
					<br/>
				}
				if params.Inventory.Statistics.Special != (types.Special{}) {
					<strong>Special: </strong>
					<br/>
					if params.Inventory.Statistics.Special.Effect != "" {
						<em class="pl-2">Effect: </em> { params.Inventory.Statistics.Special.Effect }
						<br/>
					}
					if params.Inventory.Statistics.Special.Usage != "" {
						<em class="pl-2">Usage: </em> { params.Inventory.Statistics.Special.Usage }
						<br/>
					}
					if params.Inventory.Statistics.Special.Curse != "" {
						<em class="pl-2">Curse: </em> { params.Inventory.Statistics.Special.Curse }
						<br/>
					}
				}
			</p>
		}
		<p id="details" class="py-2">
			<strong>Rarity: </strong>{ fmt.Sprintf("%d/5", params.Inventory.Rarity) }
			<br/>
			if params.Inventory.BuyPrice > 0 {
				<strong>Buy price: </strong>{ fmt.Sprintf("%d gold", params.Inventory.BuyPrice) }
				<br/>
			}
			if params.Inventory.SellPrice > 0 {
				<strong>Sell price: </strong>{ fmt.Sprintf("%d gold", params.Inventory.SellPrice) }
				<br/>
			}
			if len(params.Inventory.Vocations) > 0 {
				<strong>Used by: </strong>{ strings.Join(params.Inventory.Vocations, ", ") }
				<br/>
			}
			<strong>Classification: </strong>{ params.Inventory.Classification }
		</p>
		if len(params.Inventory.LocationsFound) > 0 {
			<div id="locations-found" class="py-2">
				<strong>Where to find:</strong>
				<ul class="pl-8 list-disc">
					for _, location := range params.Inventory.LocationsFound {
						<li>
							{ location }
						</li>
					}
				</ul>
			</div>
		}
		if len(params.Inventory.DroppedBy) > 0 {
			<div id="dropped-by" class="py-2">
				<strong>Dropped by:</strong>
				<ul class="pl-8 list-disc">
					for monster, dropRate := range params.Inventory.DroppedBy {
						<li>
							@links.ThingLink(monster, params.Getter)
							<span>
								&nbsp;{ dropRate }
							</span>
						</li>
					}
				</ul>
			</div>
		}
		if len(params.Inventory.Recipe) > 0 {
			<div id="recipe" class="py-2">
				<strong>Recipe: </strong>
				for index, ingredient := range params.Inventory.RecipeSlice() {
					if index > 0 {
						<span>&nbsp;+ </span>
					}
					@links.ThingLink(ingredient.ID, params.Getter)
					<span>&times;{ strconv.Itoa(ingredient.Quantity) }</span>
				}
			</div>
		}
		if len(params.Inventory.IngredientFor) > 0 {
			<div id="alchemises" class="py-2">
				<strong>Alchemises:</strong>
				<ul class="pl-8 list-disc">
					for _, id := range params.Inventory.IngredientFor {
						<li>
							@links.ThingLink(id, params.Getter)
						</li>
					}
				</ul>
			</div>
		}
		if len(params.Inventory.RequiredFor) > 0 {
			<div id="required-for" class="py-2">
				<strong>Required for:</strong>
				<ul class="pl-8 list-disc">
					for _, id := range params.Inventory.RequiredFor {
						<li>
							@links.ThingLink(id, params.Getter)
						</li>
					}
				</ul>
			</div>
		}
		if len(params.Inventory.CanBeUsedFor) > 0 {
			<div id="can-be-used-for" class="py-2">
				<strong>Can be used for:</strong>
				<ul class="pl-8 list-disc">
					for _, id := range params.Inventory.CanBeUsedFor {
						<li>
							@links.ThingLink(id, params.Getter)
						</li>
					}
				</ul>
			</div>
		}
	</div>
}
