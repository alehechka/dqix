package links

import "dqix/internal/types"
import "regexp"

type iText interface {
	render() templ.Component
}

type textBlockLinks []iText

type textBlock struct {
	text string
}

func (s textBlock) render() templ.Component {
	return text(s.text)
}

templ text(text string) {
	{ text }
}

type thinkLinkBlock struct {
	id     string
	getter types.IGetThingFromID
}

func (t thinkLinkBlock) render() templ.Component {
	return ThingLink(t.id, t.getter)
}

func parseTextBlockLinks(text string, getter types.IGetThingFromID) (blocks textBlockLinks) {
	rgxp := regexp.MustCompile(`\${[^}]+}`)

	indices := rgxp.FindAllIndex([]byte(text), len(text))
	if len(indices) == 0 {
		blocks = append(blocks, textBlock{text: text})
		return
	}

	currentIndex := 0
	for _, index := range indices {
		section := text[currentIndex:index[0]]
		if section != "" {
			blocks = append(blocks, textBlock{text: section})
		}

		thingId := types.TitleToID(text[index[0]+2 : index[1]-1])
		blocks = append(blocks, thinkLinkBlock{id: thingId, getter: getter})

		currentIndex = index[1]
	}

	endSection := text[indices[len(indices)-1][1]:]
	if endSection != "" {
		blocks = append(blocks, textBlock{text: endSection})
	}

	return
}

templ TextBlockLinks(text string, getter types.IGetThingFromID) {
	for _, textBlockLink := range parseTextBlockLinks(text, getter) {
		@textBlockLink.render()
	}
}
